#!/usr/bin/perl

use Cwd 'abs_path';
use POSIX; 

parse_args();

read_params($param_file);


@output=();

############ Data pre-processing #################

if($option==2){
    def_cis_snp();

}

if($option==3){
    assemble();

}


############ Gene-level screening ##################


if($option==4){
    gene_level_analysis();

}


########### Multiple SNP fine mapping ################


if($option==5){
    fine_mapping();
}


########## Accessories/link to other interfaces ############

if($option==6){
    prep_hm();
}

print_output($key);




sub parse_args{
    
    $option = -1;

    for $i (0..$#ARGV){
	

	if($ARGV[$i] eq "-help"){
	    print_usage();
	    exit;
	}

	if($ARGV[$i] eq '-p'){
	    $param_file = $ARGV[++$i];
	    next;
	}

	if($ARGV[$i] eq "-cis_def"){
	    $option = 2;
	    $key = "cis";
	}

	if($ARGV[$i] eq "-assemble"){
	    $option = 3;
	    $key = "assemble";
	}
	
	if($ARGV[$i] eq "-ga"){
	    $option = 4;
	    $key = "ga";
	}
	
	if($ARGV[$i] eq "-fine_mapping" || $ARGV[$i] eq "-fm" ){
	    $option = 5;
	    $key = "fm";
	}

	if($ARGV[$i] eq "-prep_hm" || $ARGV[$i] eq "-prep_eqtlbma"){
	    $option = 6;
	    $key = "eqtlbma";
	}
    }
    
    if(!defined($param_file)){
	print STDERR "Error: parameter file is not specified\n";
	print_usage();
	exit;
    }

    if($option == -1){
	print STDERR "Error: no valid option defined\n";
	print_usage();
	exit;
    }

}
    

sub print_usage {
    
    print STDERR "\nUsage: fm_eqtl -[cis_def | assemble | ga | fm | prep_hm] -p param_file\n\n";
}



sub read_params {
    
    my ($file) = @_;
    open PARAM, "$file";
    while(<PARAM>){
	chomp;
	next if $_ !~ /\S/;
	next if /^\s*\#/;
	
	if ($_ !~ /^\s*(\S+)\s+(\S+)/){
	    print STDERR "Warning: unexpected parameter file format\n";
	    print "$_\n";
	    next;
	}
	my $key =  $1;
	my $val =  $2;
	$key =~ tr/a-z/A-Z/;
	$param{$key} = $val;
    }

}

sub def_cis_snp{
    
    if(!defined($param{CIS_DEF_DIR})){
	$param{CIS_DEF_DIR} =  './';
    }
    if (! -d $param{CIS_DEF_DIR}){
	`mkdir -p $param{CIS_DEF_DIR}`;
    }
    
    
    
    #open OUT, ">batch_cis.cmd";
    my $script = abs_path($param{FMEQTL_BIN}."\/cis_snp.pl");
    if(! -r $script){
	print STDERR "Error: required script cis_snp.pl can't be read\n";
	exit;
    }

    

    if($param{SNP_MAP} =~ /\*/){
	for $chr (1..22){
	    my $gene_map = abs_path($param{GENE_MAP});
	    $gene_map=~s/\*/$chr/;
	    my $snp_map = abs_path($param{SNP_MAP});
	    $snp_map=~s/\*/$chr/;

	    next if (! -e "$snp_map" || ! -e "$gene_map");
	    $out = abs_path("$param{CIS_DEF_DIR}\/chr$chr.cis.snp");

	    #print OUT "perl $script $gene_map  $snp_map $param{CIS_RD} $out\n";	    
	    push @output, "perl $script $gene_map  $snp_map $param{CIS_RD} $out\n";	    
	}
    }else{
	$out = abs_path("$param{CIS_DEF_DIR}\/cis.snp");
	my $gene_map = abs_path($param{GENE_MAP});
	my $snp_map = abs_path($param{SNP_MAP});
 
	#print OUT "perl $script $gene_map $snp_map $param{CIS_RD} $out\n";
	push @output, "perl $script $gene_map  $snp_map $param{CIS_RD} $out\n";	    
    }
}


sub assemble {
    
    
    if(!defined($param{MODEL})){
	print STDERR "Error: missing MODLE specification (MVLR or SSLR)\n\n";
	exit;
    }
    
    my $script = $param{FMEQTL_BIN};
    $param{MODEL} =~tr/a-z/A-Z/;
    
    if($param{MODEL} eq "SSLR"){
	$script .= "\/assemble_sslr.pl";
    }elsif($param{MODEL} eq "MVLR"){
	$script .= "\/assemble_mvlr.pl";
    }else{
	print STDERR "Error: unknown MODELT specification. MODEL should be either MVLR or SSLR. \n";
	exit;
    }
	




    my $subgrp_file = abs_path($param{SUBGRP_DEF});
    if(!defined($param{ASSEMBLE_DIR})){
	$param{ASSEMBLE_DIR} =  './';
    }
    if (! -d $param{ASSEMBLE_DIR}){
	`mkdir -p $param{ASSEMBLE_DIR}`;
    }
    
    #open OUT, ">batch_assemble.cmd";

   

    for $chr (1..22){
	my $cis_file = abs_path($param{CIS_DEF_MAP});
	my $geno_data = abs_path($param{GENO_DATA}); # may contain wildcard for chromosomes, wildcard handled here
	
	$cis_file =~s/\*/$chr/;
	$geno_data =~s/\*/$chr/;
	next if (! -e "$cis_file" || ! -e "$geno_data");

	my $expr_data = abs_path($param{EXPR_DATA}); # may contain wildcard for subgroups, wildcard should be passed on
	my $assemble_out = abs_path($param{ASSEMBLE_DIR});
       	
	#print OUT "perl $script $subgrp_file $cis_file \"$expr_data\" \"$geno_data\" $param{ASSEMBLE_DIR}\n";
	#print OUT "perl $script $subgrp_file $cis_file \'$expr_data\' \'$geno_data\' $assemble_out\n";
	push @output, "perl $script $subgrp_file $cis_file \'$expr_data\' \'$geno_data\' $assemble_out\n";
    }
}


######################################################################################################

	
sub gene_level_analysis {



    my $script = abs_path($param{FMEQTL_BIN});
    
    $param{MODEL} =~tr/a-z/A-Z/;
    
    if($param{MODEL} eq "SSLR"){
	$script .= "\/sbams_sslr";
    }elsif($param{MODEL} eq "MVLR"){
	$script .= "\/sbams_mvlr";
    }else{
	print STDERR "Error: unknown MODELT specification. MODEL should be either MVLR or SSLR. \n";
	exit;
    }
	



    
    if(-r $param{USE_SUBSET}){
	$use_subset = 1;
	open LIST, "$param{USE_SUBSET}";
	my @list = <LIST>;
	chomp @list;
	@subset{@list} = @list;
    }

    if($param{USE_META} == 1){
	$meta_option = "-meta";
    }else{
	$meta_option = "";
    }


    my @gene_files = <$param{EQTL_DATA}>;
    $grid_file = abs_path($param{GRID_FILE});
    #open OUT, ">batch_ga.cmd";



    if(!defined($param{GA_DIR})){
	$param{GA_DIR} =  './';
    }
    if (! -d $param{GA_DIR}){
	`mkdir -p $param{GA_DIR}`;
    }

    
    foreach $f (@gene_files){
	$f =~ /(ENSG\d+)\./;
	my $gene = $1;
	next if($use_subset && !defined($subset{$gene}));
    
    my $ga_out=abs_path($param{GA_DIR});
    
	#print OUT "$script -d $f -g $grid_file -ga -n $gene $meta_option > $ga_out/$gene.ga.rst\n";
	push @output, "$script -d $f -g $grid_file -ga -n $gene $meta_option > $ga_out/$gene.ga.rst\n";
	
    }
    

}




sub prep_hm {
    

    my $script = abs_path($param{FMEQTL_BIN});

    $param{MODEL} =~tr/a-z/A-Z/;

    if($param{MODEL} eq "SSLR"){
	$script .= "\/sbams_sslr";
    }elsif($param{MODEL} eq "MVLR"){
	$script .= "\/sbams_mvlr";
    }else{
	print STDERR "Error: unknown MODELT specification. MODEL should be either MVLR or SSLR. \n";
        exit;
    }



    $use_subset = 0;
    if(-r $param{USE_SUBSET}){
	$use_subset = 1;
	open LIST, "$param{USE_SUBSET}";
	my @list = <LIST>;
	chomp @list;
	@subset{@list} = @list;
    }


    if($param{USE_META} == 1){
	$meta_option = "-meta";
    }else{
        $meta_option = "";
    }


    
    my @gene_files = <$param{EQTL_DATA}>;
    $grid_file = abs_path($param{GRID_FILE});
    #open OUT, ">batch_hm.cmd";


    if(!defined($param{HM_DIR})){
	$param{HM_DIR} =  './';
    }
    if (! -d $param{HM_DIR}){
	`mkdir -p $param{HM_DIR}`;
    }

    
    foreach $f (@gene_files){
	$f =~ /(ENSG\d+)\./;
	my $gene = $1;
	next if($use_subset && !defined($subset{$gene}));
    my $hm_out = abs_path($param{HM_DIR});
	#print OUT "sbams_sslr -d $f -g $grid_file -prep_hm  -n $gene $meta_option > $hm_out/$gene.hm.in\n";
	push @output, "sbams_sslr -d $f -g $grid_file -prep_hm  -n $gene $meta_option > $hm_out/$gene.hm.in\n";
    }



	

}







sub fine_mapping {


    my $script = abs_path($param{FMEQTL_BIN});
    
    $param{MODEL} =~tr/a-z/A-Z/;
    
    if($param{MODEL} eq "SSLR"){
	$script .= "\/sbams_sslr";
    }elsif($param{MODEL} eq "MVLR"){
	$script .= "\/sbams_mvlr";
    }else{
	print STDERR "Error: unknown MODELT specification. MODEL should be either MVLR or SSLR. \n";
        exit;
    }



    
    $use_subset = 0;
    if(-r $param{USE_SUBSET}){
	$use_subset = 1;
	open LIST, "$param{USE_SUBSET}";
	my @list = <LIST>;
	chomp @list;
	@subset{@list} = @list;
    }

    
    if($param{USE_META} == 1){
	$meta_option = "-meta";
    }else{
        $meta_option = "";
    }

       
    if(-r $param{PRIOR_FILE}){
	$prior_option = "-p $param{PRIOR_FILE}";
    }else{
	$prior_option ="";
    }




    my @gene_files = <$param{EQTL_DATA}>;
    $grid_file = abs_path($param{GRID_FILE});
    #open OUT, ">batch_fm.cmd";


    if(!defined($param{FM_DIR})){
	$param{FM_DIR} =  './';
    }
    if (! -d $param{FM_DIR}){
	`mkdir -p $param{FM_DIR}`;
    }

 

    foreach $f (@gene_files){
	$f =~ /(ENSG\d+)\./;
	my $gene = $1;
	next if($use_subset && !defined($subset{$gene}));
	#print OUT "sbams_sslr -d $f -g $grid_file  $meta_option $prior_option  > $param{FM_DIR}/$gene.fm.rst 2>/dev/null\n";
	my $fm_out = abs_path($param{FM_DIR});
	#print OUT "sbams_sslr -d $f -g $grid_file  -scan > $fm_out/$gene.scan.rst\n";
	#"sbams_sslr -d $f -g $grid_file  -scan > $fm_out/$gene.scan.rst\n";
	push @output, "$script -d $f -g $grid_file  $meta_option $prior_option  > $param{FM_DIR}/$gene.fm.rst 2>/dev/null\n";
    }



	

}




sub print_output {
    
    my ($key) = @_;
    $batch = 1;
    if($param{OUTPUT_BATCH}>1){
	$batch = $param{OUTPUT_BATCH};
    }
    
    $prefix = "batch_".$key;
    if($batch == 1){
	open OUT, ">$prefix.cmd";
    }else{
	open OUT, ">$prefix.1.cmd";
    }
    
    my $line = scalar(@output);
    $num_per_batch = int($line/$batch);
    
    $index = 1;
    $count = 1;
    for ($i=0;$i<$line;$i++){
	print OUT $output[$i];
	$count++;
	last if $i==$line-1;
	if($i%$num_per_batch==0){
	    close OUT;
	    $count = 1;
	    $index++;
	    open OUT, ">$prefix.$index.cmd";
	}
    }
    close OUT;
}
    
    
